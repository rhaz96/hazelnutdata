mutate(Score_diff = Before-After) %>%
filter(Score_diff != 0)
wilcox.test(test_scores_clean$Before,
test_scores_clean$After,
paired = T,
alternative = "less")
wilcox.test(test_scores_clean$Before,
test_scores_clean$After,
paired = T,
alternative = "less", exact = T)
wilcox.test(test_scores_clean$Before,
test_scores_clean$After,
paired = T,
alternative = "less")
300/2/2/2
300/2/2/2/2
300/2/2/2/2/2
300/2/2/2/2/2/2
300/2/2/2/2/2/2/2
300/2/2/2/2/2/2/2/2
test_scores <- data.frame(Before =
c(6,20,40,20,40,33,3,3,35.5,37.49,25,35,35),
After = c(30,38,40,40,30,40,7,11,38,40,25,38,40))
library(dplyr)
test_scores_clean = test_scores %>%
mutate(Score_diff = Before-After) %>%
filter(Score_diff != 0)
wilcox.test(test_scores_clean$Before,
test_scores_clean$After,
paired = T,
alternative = "less")
10/13
blogdown:::serve_site()
devtools::install_github("hadley/emo")
install.packages("emo")
devtools::install_github("hadley/emo")
hist(rolls_to_eq_outcome)
# reproducibility
set.seed(42)
# define number of trials to be 10000
num_trials <- 1:10000
# a vector that stores the number of rolls it takes for each trial to arrive at an equal number of faces
rolls_to_eq_outcome <- c()
for (i in num_trials){ # for each trial
# initialze a counter that keeps track of how many rolls it took to get all equal faces for that trial
num_to_equal_faces <- 0
# the default die faces
dice <- 1:6
# start tracking if a roll has equal faces
while (TRUE) {
# roll the dice
roll_outcome <- sample(dice, size=6, replace = T)
# increment counter
num_to_equal_faces <- num_to_equal_faces + 1
# if the six faces are not all equal...
if (length(unique(roll_outcome)) != 1) {
# update faces of the die to the latest outcome and roll again
dice <- roll_outcome
}
# if you do get a roll with all six faces being the same...
if (length(unique(roll_outcome)) == 1){
# append the number of rolls it took to the rolls_to_eq_outcome
rolls_to_eq_outcome <- append(rolls_to_eq_outcome, num_to_equal_faces)
break
}
}
}
paste0("Average number of rolls to get equal faces: ", mean(rolls_to_eq_outcome))
hist(rolls_to_eq_outcome)
mean(rolls_to_eq_outcome)
boxplot(rolls_to_eq_outcome)
median(rolls_to_eq_outcome)
length(rolls_to_eq_outcome)
plot(num_trials, rolls_to_eq_outcome)
rolls_to_eq_outcome
plot(num_trials, rolls_to_eq_outcome, lty="l")
plot(num_trials, rolls_to_eq_outcome, lty=2)
plot(num_trials, rolls_to_eq_outcome, lty=4)
plot(num_trials, rolls_to_eq_outcome, lty=6)
plot(num_trials, rolls_to_eq_outcome, type = "l")
which(rolls_to_eq_outcome > 60)
plot(num_trials, rolls_to_eq_outcome, size = 0.5)
plot(num_trials, rolls_to_eq_outcome, cex = 0.5)
warnings()
plot(num_trials, rolls_to_eq_outcome, cex = 0.5)
plot(num_trials, rolls_to_eq_outcome, cex = 0.5, xlab = "Trial Number", ylab = "Rolls", main = "Rolls to Achieve Equal Faces")
plot(num_trials, rolls_to_eq_outcome, cex = 0.5, xlab = "Trial Number", ylab = "Rolls", main = "Rolls to Achieve Equal Faces", col = "steelblue")
xx = rolls_to_eq_outcome[1:5]
plot(1:5, xx)
plot(num_trials, rolls_to_eq_outcome, cex = 0.5, xlab = "Trial Number", ylab = "Rolls", main = "Rolls to Achieve Equal Faces")
paste0(1:5, 'k')
axis(side = 1, at = seq(0,100000,20000), labels = paste0(seq(0,100,20), "k"), cex.axis = 1)
plot(num_trials, rolls_to_eq_outcome, cex = 0.5, xlab = "Trial Number", ylab = "Rolls", main = "Rolls to Achieve Equal Faces", col = "steelblue", xaxt = "n")
plot(num_trials, rolls_to_eq_outcome, cex = 0.5, xlab = "Trial Number", ylab = "Rolls", main = "Rolls to Achieve Equal Faces", col = "steelblue", xaxt = "n")
axis(side = 1, at = seq(0,100000,20000), labels = paste0(seq(0,100,20), "k"), cex.axis = 1)
plot(num_trials, rolls_to_eq_outcome, cex = 0.5, xlab = "Trial Number", ylab = "Rolls", main = "Rolls to Achieve Equal Faces", col = "steelblue")
#axis(side = 1, at = seq(0,100000,20000), labels = paste0(seq(0,100,20), "k"), cex.axis = 1)
num_trials
(1/6)^12
(1/6)^6
12/100000
2.143347e-05 * 100000
12/100000
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
choose(1000,2)
blogdown:::insert_image_addin()
blogdown:::serve_site()
wilcox.test(test_scores_clean$Before,
test_scores_clean$After,
paired = T,
alternative = "less")
6/499,500
6/499500
qnorm(.975)
qt(.975)
qt(.975, df=100)
qt(.975, df=1000)
qt(.975, df=10000)
qt(.95, df=10000)
qnorm(.95)
blogdown:::insert_image_addin()
blogdown:::serve_site()
install.packages("coin")
library(coin)
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500))
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500)))
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500)))
happy_study
happy_study
library(coin)
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500)),
Happiness = c(rnorm(500, mean = 30, sd = 2), rnorm(500, mean = 70, sd = 3)))
happy_study
View(happy_study)
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500)),
Happiness = c(rnorm(500, mean = 30, sd = 2), rnorm(500, mean = 50, sd = 3)))
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500)),
Happiness = c(rnorm(500, mean = 30, sd = 2), rnorm(500, mean = 40, sd = 3)))
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500)),
Happiness = c(rnorm(500, mean = 30, sd = 2), rnorm(500, mean = 30, sd = 3)))
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 500), rep("Treatment", 500)),
Happiness = c(rnorm(500, mean = 30, sd = 2), rnorm(500, mean = 35, sd = 3)))
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 100), rep("Treatment", 100)),
Happiness = c(rnorm(500, mean = 30, sd = 2), rnorm(500, mean = 35, sd = 3)))
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 100), rep("Treatment", 100)),
Happiness = c(rnorm(500, mean = 30, sd = 2), rnorm(500, mean = 35, sd = 2)))
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 100), rep("Treatment", 100)),
Happiness = c(rnorm(500, mean = 30, sd = 4), rnorm(500, mean = 35, sd = 2)))
independence_test(Happiness ~ Assignment, data = happy_study)
boxplot(happy_study$Assignment, happy_study$Happiness)
happy_study <- data.frame(Assignment = c(rep("Control", 100), rep("Treatment", 100)),
Happiness = c(rnorm(100, mean = 30, sd = 4), rnorm(100, mean = 35, sd = 2)))
independence_test(Happiness ~ Assignment, data = happy_study)
boxplot(happy_study$Assignment, happy_study$Happiness)
happy_study
happy_study <- data.frame(Assignment = c(rep("Control", 100), rep("Treatment", 100)),
Happiness = c(rnorm(100, mean = 30, sd = 2), rnorm(100, mean = 35, sd = 2)))
independence_test(Happiness ~ Assignment, data = happy_study)
boxplot(happy_study$Assignment, happy_study$Happiness)
boxplot(happy_study$Happiness~happy_study$Assignment)
happy_study <- data.frame(Assignment = c(rep("Control", 100), rep("Treatment", 100)),
Happiness = c(rnorm(100, mean = 30, sd = 5), rnorm(100, mean = 35, sd = 2)))
independence_test(Happiness ~ Assignment, data = happy_study)
happy_study <- data.frame(Assignment = c(rep("Control", 100), rep("Treatment", 100)),
Happiness = c(rnorm(100, mean = 30, sd = 10), rnorm(100, mean = 35, sd = 2)))
independence_test(Happiness ~ Assignment, data = happy_study)
choose(100,2)
15/4950
blogdown:::insert_image_addin()
365*5
blogdown:::new_post_addin()
wilcox.test(test_scores_clean$Before,
test_scores_clean$After,
paired = T,
alternative = "less")
11/13
10/13
10/13
6.05+2.81
11-8.86
2.81+3
9.99/(20.35*2)
3.33/18
50*.05
choose(10,3)
?adf.test
library(vars)
?VAR
library(var)
library(vars)
?VARselect
cmort <- read.csv("~/Desktop/SMU/TimeSeries/la_cmort_study.csv")
cmort
VARselect(cmort, p = 7, type = "both")
VARselect(cmort, lag.max = 7, type = "both")
VAR(cmort, lag.max = 7, type = "both")
VAR(cmort, p = 4, type = "both")
AIC(VAR(cmort, p = 4, type = "both"))
VARselect(cmort)
VAR(cmort, p=1)
AIC(VAR(cmort, p=1))
data(Canada)
VARselect(Canada, lag.max = 5, type="const")
VAR(Canada, p=3)
AIC(VAR(Canada, p=3))
?AIC
library(tswge)
factor.wge(c(.9, -1.4))
?Box.test
?mlp
500^2
f2 <- read.csv(file.choose())
f2
VARselect(f2, type = "both")
AIC(VAR(f2, p=2, type="both"))
VARselect(f2, type = "const")
AIC(VAR(f2, p=2, type="const"))
?AIC
VAR(f2, p=2, type="const", ic = "AIC")
1.88/8.9
4.04/20
8.9*2
VARselect(f2, type = "const")
?VARselect
VARselect(f2, type = "both")
VAR(f2, p=5, type="const", ic = "AIC")
39.5+6
100-45.5+23
100-45.5
13+10+6+19+15+40
9.3809524 - 8.6666667
13+10+4+19+15+40
40+15+23
40+15+33
1-0.5
-0.5+0.5
-0.5+1.5
1.5/2
.75*2
5+0.75*4
1-3/2
1-(2*-0.5)
0.75*2
-0.5+1.5
4-16
1-(3*-0.5)
-2*c(2,3,2) - 1*c(-1,1,1) + 1*c(2,8,6)
-2*c(2,3,2) - 2*c(-1,1,1) + 1*c(2,8,6)
choose(5,3)
choose(4,3)
(31-13)/13
(33-26)/33
33-26
14.5+7.5
56.5+23
-56.5+23
34-12
.0998+0.010283
65
65-12+3
56/65
56/65*20
56/65
1.5*6
100-13
.87*12
.87*20
-4*c(2,3,2) - 2*c(-1,1,1) + 2*c(2,8,6)
-2*c(2,3,2) - 2*c(-1,1,1) + 2*c(2,8,6)
-2*c(2,3,2) - 2*c(-1,1,1) + 1*c(2,8,6)
-4*c(2,3,2) - 4*c(-1,1,1) + 2*c(2,8,6)
1-(3*-0.5)
1-(2*-0.5)
210-77
133-56
.99*20
.97*20
.88*20
.84*20
65-20.5
44.5/65*20
44.5/65
65-33.5
65-32
33/65
65-7.5
57.5/65
100-35
100-33.5
100-20.5
100-20.5
100-23.5
100-17.5
.65*20
.60*20
.85*20
.65*20
.7*20
.80*20
.8*20
.7*20
.8*20
82.92-80.37
2.55/13
3-(5*-1/3)
14/3
2-(5*7/3)
-16/3
8/3
/25/3
-25/3
-26/3
-27/3
-29/3
-15-63
6-27
29*5
(-78*14)+(145*3)
14*3
(14*21)+75
-21-(5*-15/14)
369/14
(14*-21)+75
-219/14
219*3/657
219*3
-15+29
61*5
8+(5/7) == 61/7
(61/7)*(-7/4) == -61/4
(61/7)*(-7/4)
61/4
-61/4
(61/7)*(-7/4) == (-61/4)
-61/4
-61/4 == -15.25
-61/4 == -15.25
-61/4 == (61/7)*(-7/4)
-61/4 == ((61/7)*(-7/4))
(-61/4) == ((61/7)*(-7/4))
(61/7)*(-7/4)
(-1/7)-((5/7)*(-61/4))
301/28
5-3*10.75
-763/28
-27.25-(2*-61/4)
91/28
-1-2*3
-1-2*2
x <- 91/28
y <- 301/28
z <- -61/4
x+3*y+2*z
2*x-y-z
-x+2*y+z
2*x+3
51*3
28*5
140-153
51/28
13/4
(55/28)-(1/7)
(-1/7) - (5/7)*(-11/4)
13/4
36+55
91/28
28*5
91*3
140-273
22*7
154-133
21/28
x <- -2
y <- 6
z <- 3
2*x - y - 4*z
-x + y + 2*z
x <- 10
-x + y + 2*z
2*x - y - 4*z
choose(100,1)
choose(100,1)*(0.04^1)*(.96^99)
library(Sleuth3)
Sleuth3::ex0518
-6+-3
-9-(3*-3)
-15-(3*-5)
4-(3*-3)
qnorm(1-.025)
8/1.96
pnorm(1.96, mean = 0, sd = 4.0816)
qnorm(1-.025, mean = 0, sd = 8/1.96)
qnorm(1-.025, mean = 0, sd = 8*1.1/1.96)
8*1.1/1.96
8/1.86
8/1.96
1- pnorm((8/4.49))
8/4.49
pnorm(1.78, lower.tail = F)
(.0375-.025)/.025
3.75-2.5
16*4.01^2
(16*4.01^2 - 256)/.01
(16*4.001^2 - 256)/.001
16*16
16*8
16*8
16*4^2
16*5^2
400-256
144+16
blogdown:::new_post_addin()
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
# hat tip of interaction from https://stackoverflow.com/questions/9968976/group-by-two-columns-in-ggplot2
ggplot(wb2_tidy, aes(Year, Value, color=Country.Name, shape = `Expenditure Type`,
group=interaction(Country.Code, Series.Code))) +
geom_line() +
geom_point(size=3) +
theme_minimal() +
xlab("") +
ylab("Expenditure (US$)")+
#theme(panel.grid.major.x = element_blank(),
#      plot.title = element_text(family = "Georgia", size = 14))+
theme(text = element_text(size = 14))+
scale_color_brewer(palette = "Dark2") +
labs(color = "Country Income Bracket", shape = "Expenditure Per Capita Type") +
ggtitle("Global Spending on Health 2000 - 2017")
library(tidyr)
library(tidyverse)
wb <- read.csv("~/Desktop/SMU/Viz/world_bank_WDIhealth.csv")
# eliminate redundant or empty columns
wb2 <- wb[, -c(3,23,24)]
# reformat yr columns
cols_to_change <- colnames(wb2)[4:21]
yr_cols <- sapply(cols_to_change, function(x) substring(x, 2, 5))
colnames(wb2)[4:21] <- yr_cols
# remove physician data from main data frame
physician_rows <- which(wb2$Series.Code == "SH.MED.PHYS.ZS")
physician_data <- wb2[physician_rows, ]
# delete physician data from original data frame
wb2 <- wb2[-physician_rows, ]
# make rest of data numeric instead of columns
wb2[, 4:21] <- apply(wb2[, 4:21], 2 , as.numeric)
# make from wide to long by gathering all years into a single variable
wb2_tidy <- wb2 %>% gather(Year, Value, "2000":"2017")
# convert expenditure types to shorter names
wb2_tidy <- wb2_tidy %>% mutate(`Expenditure Type` =
ifelse(Series.Code == "SH.XPD.PVTD.PC.CD", "Private",
ifelse(Series.Code == "SH.XPD.GHED.PC.CD", "Government", "Out-of-pocket")))
# hat tip of interaction from https://stackoverflow.com/questions/9968976/group-by-two-columns-in-ggplot2
ggplot(wb2_tidy, aes(Year, Value, color=Country.Name, shape = `Expenditure Type`,
group=interaction(Country.Code, Series.Code))) +
geom_line() +
geom_point(size=3) +
theme_minimal() +
xlab("") +
ylab("Expenditure (US$)")+
#theme(panel.grid.major.x = element_blank(),
#      plot.title = element_text(family = "Georgia", size = 14))+
theme(text = element_text(size = 14))+
scale_color_brewer(palette = "Dark2") +
labs(color = "Country Income Bracket", shape = "Expenditure Per Capita Type") +
ggtitle("Global Spending on Health 2000 - 2017")
library(tidyr)
library(tidyverse)
wb <- read.csv("~/Desktop/SMU/Viz/world_bank_WDIhealth.csv")
# eliminate redundant or empty columns
wb2 <- wb[, -c(3,23,24)]
# reformat yr columns
cols_to_change <- colnames(wb2)[4:21]
yr_cols <- sapply(cols_to_change, function(x) substring(x, 2, 5))
colnames(wb2)[4:21] <- yr_cols
# remove physician data from main data frame
physician_rows <- which(wb2$Series.Code == "SH.MED.PHYS.ZS")
physician_data <- wb2[physician_rows, ]
# delete physician data from original data frame
wb2 <- wb2[-physician_rows, ]
# make rest of data numeric instead of columns
wb2[, 4:21] <- apply(wb2[, 4:21], 2 , as.numeric)
# make from wide to long by gathering all years into a single variable
wb2_tidy <- wb2 %>% pivot_longer(Year, Value, "2000":"2017")
blogdown:::insert_image_addin()
blogdown:::serve_site()
install.packages("xfun")
library(xfun)
xfun::pkg_load2(c('htmltools', 'mime'))
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, comment=NA)
xfun::embed_file("~/Desktop/SMU/Viz/world_bank_WDIhealth.csv")
xfun::embed_file("~/Desktop/SMU/Viz/world_bank_WDIhealth.csv")
blogdown:::serve_site()
10*1.5
6*1.5
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
