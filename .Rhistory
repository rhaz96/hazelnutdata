(.7-.5)/.5
(.44-.4)/.4
x=10
1.01*x
(10.1-10)/10
ln(5/2)
log(5/2)
log(5)/log(2)
log(5)-log(2)
x=4
ln(1.01*x)-ln(x)
log(1.01*x)-log(x)
log(1.01*x / x)
log(1.01*0 / 0)
log(0)
log(1.01)
(5/2)/.01
(5/2)*10
(5/2)*100
x=10
1.01*x
1.01*x-x
b0=8
b1=9
x1 = 40
exp(b0)*x^b1
x2=x1+1
x2
exp(b0)*x1^b1
exp(b0)*x1^b1
b0=8
b1=9
x1=10
x2=11
exp(b0)*(x1^b1)
exp(b0)*(x2^b1)
b1*exp(b0)*b1
b1*exp(b0)*b2
b1*exp(b0)*x1
b1*exp(b0)*x2
7.028943e+12-2.980958e+12
((b1*exp(b0)*x2)-(b1*exp(b0)*x1)) / b1*exp(b0)*x1
1.01^40
-1
1.01^40 - 1
exp(5.91+0.82*log(10))
exp(5.91+0.82*log(10*1.01))
(2455.975 - 2436.017)/2436.017
0.008192882*100
exp(2*log(3))
bo
b0
b0
b1
exp(b0)*(x^b1)
exp(b0)*((1.01*x)^b1)
3.26023e+12-2.980958e+12
(3.26023e+12-2.980958e+12)/2.980958e+12
x
1.01*x
1.01^b1 - 1
b0 = 8.49
b1 = 0.47
x=10
exp(b0 + b1*log(x))
exp(b0 + b1*log(1.01*x))
14427.5-14360.19
67.31/14427.5
67.31/14427.5 * 100
(1.01^b1 - 1)*100
exp(b0 + b1*log(0))
100*ln(1.01)
100*log(1.01)
x
1.01*x - x
(1.01*x - x)/x * 100
(1.01*x - x)/x
x
b1
((1.01*x - x)/x)*b1
((1.01*x - x)/x)*b1*100
1.01*50 - 50
exp(b0 + b1*log(1.01*500))
exp(b0 + b1*log(500))
(90720.85-90297.57)/90297.57
log(1.01*500) - log(500)
log(1.01*10) - log(10)
lm(1.01)
log(1.01)
2^.82
2^.47
1.765406-1.385109
exp(2*log(1.01*3))
1.01*3
3.03^2
(1.01)^b0
((1.01)^b0)*(exp(b0))*(x^b1)
(exp(b0))*(x^b1)
15626.03-14360.19
(2^.82)/(2^.47)
1.274461/.35
2^.35
0.47*1.274561
0.47*127
2^0.82
2^0.47
(1.77-1.39)/1.39
177-139
(.82-.47)/.47
1.77/1.39
2^0.82
2^0.47
1.765406/1.385109
2^0.35
0.47*2^0.35
2^.47
0.47*(2^0.35)
0.47*(2^0.47)
(2^0.35)*(2^0.47)
(2^0.82)
177-139
(1.77-1.39)/1.39
1/.02733813
2^0.35
0.82-0.47
(0.35/0.47)*100
(exp(5.91+0.82*log(40*1.01)) - exp(5.91+0.82*log(40))) / exp(5.91+0.82*log(40))
(exp(8.49+0.47*log(40*1.01)) - exp(8.49+0.47*log(40))) / exp(8.49+0.47*log(40))
orig <- exp(5.91+0.82*log(100))
orig <- exp(5.91+0.82*log(100))
doubled <- exp(5.91+0.82*log(200))
orig
doubled
((doubled-orig)/doubled)*100
((doubled-orig)/orig)*100
2^0.82
(doubled-orig)/orig
exp(2)
2.718^2
doubled/orig
orig*1.77
orig(1+.77)
orig*(1+.77)
doubled <- exp(8.49+0.47*log(200))
orig <- exp(8.49+0.47*log(100))
(doubled-orig)/orig
orig*(1.39)
doubled
orig*(1.385)
orig*(1.3851095)
orig_brookside <- exp(5.91+0.82*log(100))
doubled_brookside <- exp(5.91+0.82*log(200))
orig_NAmes <- exp(8.49+0.47*log(100))
doubled_NAmes <- exp(8.49+0.47*log(200))
doubled_brookside/doubled_NAmes
doubled_brookside/orig_brookside
doubled_NAmes/orig_NAmes
1.765406/1.385109
mult_inc_brookside <- doubled_brookside/orig_brookside
mult_inc_NAmes <- doubled_NAmes/orig_NAmes
mult_inc_brookside/mult_inc_NAmes
orig_brookside <- exp(5.91+0.82*log(100))
doubled_brookside <- exp(5.91+0.82*log(200))
orig_NAmes <- exp(8.49+0.47*log(100))
doubled_NAmes <- exp(8.49+0.47*log(200))
mult_inc_brookside <- doubled_brookside/orig_brookside
mult_inc_NAmes <- doubled_NAmes/orig_NAmes
mult_inc_brookside/mult_inc_NAmes
mult_inc_brookside
2^0.82
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
plt.plot(x,y)
set.seed(4)
rand_nums <- sample(1:100)
set.seed(4)
rand_nums <- rnorm(100)
plt.text(0.29, 0.6, "31%", size=40,
va="baseline", ha="right", multialignment="left",
color = "green"
)
plt.text(0.29, 0.6, "31%", size=40,
va="baseline", ha="right", multialignment="left",
color = "green"
)
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, comment=NA)
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, comment=NA)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, comment=NA)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, comment=NA)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
set.seed(4)
rand_nums <- rnorm(100)
rand_df <- data.frame(CustName = c("John", "Jerry"),
Time_start = c(10,40),
Proj_end_time = c(200,500))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, comment=NA)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
library(AppliedPredictiveModeling)
AppliedPredictiveModeling::getPackages(4)
?caret::train
install.packages(c("C50", "DMwR"))
library(DWD)
data(ticdata)
library(DwD)
library(DwDR)
library(DwD)
library(DWD)
library(kernlab)
data(ticdata)
isOrdered <- unlist(lapply(ticdata, function(x) any(class(x) == "ordered")))
isOrdered
recodeLevels <- function(x)
{
x <- gsub("f ", "", as.character(x))
x <- gsub(" - ", "_to_", x)
x <- gsub("-", "_to_", x)
x <- gsub("%", "", x)
x <- gsub("?", "Unk", x, fixed = TRUE)
x <- gsub("[,'\\(\\)]", "", x)
x <- gsub(" ", "_", x)
factor(paste("_", x, sep = ""))
}
convertCols <- c("STYPE", "MGEMLEEF", "MOSHOOFD",
names(isOrdered)[isOrdered])
convertCols
for(i in convertCols) ticdata[,i] <- factor(gsub(" ", "0",format(as.numeric(ticdata[,i]))))
ticdata$CARAVAN <- factor(as.character(ticdata$CARAVAN),
levels = rev(levels(ticdata$CARAVAN)))
### Split the data into three sets: training, test and evaluation.
library(caret)
set.seed(156)
split1 <- createDataPartition(ticdata$CARAVAN, p = .7)[[1]]
split1
other     <- ticdata[-split1,]
training  <- ticdata[ split1,]
set.seed(934)
split2 <- createDataPartition(other$CARAVAN, p = 1/3)[[1]]
evaluation  <- other[ split2,]
testing     <- other[-split2,]
split2
-split2
split2
s1 <- createDataPartition(ticdata$CARAVAN, p = .7)
s1
s1$Resample1
s1[[1]]
s1[[2]]
s1[[1]]
(1377+5877)/nrow(ticdata)
ticdata$CARAVAN
subset(ticdata, Caravan=="insurance")
nrow(subset(ticdata, CARAVAN=="insurance"))
nrow(subset(ticdata, CARAVAN=="insurance"))/nrow(ticdata)
isOrdered <- unlist(lapply(ticdata, function(x) any(class(x) == "ordered")))
recodeLevels <- function(x)
{
x <- gsub("f ", "", as.character(x))
x <- gsub(" - ", "_to_", x)
x <- gsub("-", "_to_", x)
x <- gsub("%", "", x)
x <- gsub("?", "Unk", x, fixed = TRUE)
x <- gsub("[,'\\(\\)]", "", x)
x <- gsub(" ", "_", x)
factor(paste("_", x, sep = ""))
}
convertCols <- c("STYPE", "MGEMLEEF", "MOSHOOFD",
names(isOrdered)[isOrdered])
for(i in convertCols) ticdata[,i] <- factor(gsub(" ", "0",format(as.numeric(ticdata[,i]))))
ticdata$CARAVAN <- factor(as.character(ticdata$CARAVAN),
levels = rev(levels(ticdata$CARAVAN)))
### Split the data into three sets: training, test and evaluation.
library(caret)
set.seed(156)
#70-10-20 train/validate/test split
split1 <- createDataPartition(ticdata$CARAVAN, p = .7)[[1]]
other     <- ticdata[-split1,]
training  <- ticdata[ split1,]
set.seed(934)
split2 <- createDataPartition(other$CARAVAN, p = 1/3)[[1]]
evaluation  <- other[ split2,]
testing     <- other[-split2,]
predictors <- names(training)[names(training) != "CARAVAN"]
testResults <- data.frame(CARAVAN = testing$CARAVAN)
evalResults <- data.frame(CARAVAN = evaluation$CARAVAN)
trainingInd <- data.frame(model.matrix(CARAVAN ~ ., data = training))[,-1]
evaluationInd <- data.frame(model.matrix(CARAVAN ~ ., data = evaluation))[,-1]
testingInd <- data.frame(model.matrix(CARAVAN ~ ., data = testing))[,-1]
trainingInd$CARAVAN <- training$CARAVAN
evaluationInd$CARAVAN <- evaluation$CARAVAN
testingInd$CARAVAN <- testing$CARAVAN
isNZV <- nearZeroVar(trainingInd)
noNZVSet <- names(trainingInd)[-isNZV]
testResults <- data.frame(CARAVAN = testing$CARAVAN)
evalResults <- data.frame(CARAVAN = evaluation$CARAVAN)
set.seed(1410)
rfFit <- train(CARAVAN ~ ., data = trainingInd,
method = "rf",
trControl = ctrl,
ntree = 1500,
tuneLength = 5,
metric = "ROC")
rfFit
evalResults$RF <- predict(rfFit, evaluationInd, type = "prob")[,1]
testResults$RF <- predict(rfFit, testingInd, type = "prob")[,1]
rfROC <- roc(evalResults$CARAVAN, evalResults$RF,
levels = rev(levels(evalResults$CARAVAN)))
rfROC
set.seed(1410)
rfFit <- train(CARAVAN ~ ., data = trainingInd,
method = "rf",
trControl = ctrl,
ntree = 1500,
tuneLength = 5,
metric = "ROC")
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
fourStats <- function (data, lev = levels(data$obs), model = NULL)
{
accKapp <- postResample(data[, "pred"], data[, "obs"])
out <- c(accKapp,
sensitivity(data[, "pred"], data[, "obs"], lev[1]),
specificity(data[, "pred"], data[, "obs"], lev[2]))
names(out)[3:4] <- c("Sens", "Spec")
out
}
ctrl <- trainControl(method = "cv",
classProbs = TRUE,
summaryFunction = fiveStats)
ctrlNoProb <- ctrl
ctrlNoProb$summaryFunction <- fourStats
ctrlNoProb$classProbs <- FALSE
set.seed(1410)
rfFit <- train(CARAVAN ~ ., data = trainingInd,
method = "rf",
trControl = ctrl,
ntree = 1500,
tuneLength = 5,
metric = "ROC")
2+2
@
"@"
print("@")
trainingInd
?downSample
ncol(trainingInd)
bankingDF_working <- py$bankingDF_working
str(bankingDF_working)
?caret::train
?trainControl
?createDataPartition
set.seed(42)
index <- createDataPartition(bankingDF_working$y, p = 0.8, list = FALSE)
train_data <- bankingDF_working[index, ]
test_data  <- bankingDF_working[-index, ]
ctrl <- trainControl(method = "cv",
number = 5,
sampling = "up")
set.seed(42)
model_rf_over <- caret::train(classes ~ .,
data = train_data,
method = "rf",
trControl = ctrl)
set.seed(42)
index <- createDataPartition(bankingDF_working$y, p = 0.8, list = FALSE)
train_data <- bankingDF_working[index, ]
test_data  <- bankingDF_working[-index, ]
ctrl <- trainControl(method = "cv",
number = 5,
sampling = "up")
set.seed(42)
model_rf_over <- caret::train(y ~ .,
data = train_data,
method = "rf",
trControl = ctrl)
train_data
str(train_data)
is.data.frame(train_data)
train_data$y
bankingDF_working <- py$bankingDF_working
set.seed(42)
index <- createDataPartition(bankingDF_working$y, p = 0.8, list = FALSE)
bankingDF_working <- py$bankingDF_working
set.seed(42)
index <- createDataPartition(bankingDF_working$result, p = 0.8, list = FALSE)
train_data <- bankingDF_working[index, ]
test_data  <- bankingDF_working[-index, ]
ctrl <- trainControl(method = "cv",
number = 5,
sampling = "up")
set.seed(42)
model_rf_over <- caret::train(y ~ .,
data = train_data,
method = "rf",
trControl = ctrl)
bankingDF_working <- py$bankingDF_working
set.seed(42)
index <- createDataPartition(bankingDF_working$result, p = 0.8, list = FALSE)
train_data <- bankingDF_working[index, ]
test_data  <- bankingDF_working[-index, ]
ctrl <- trainControl(method = "cv",
number = 5,
sampling = "up")
set.seed(42)
model_rf_over <- caret::train(result ~ .,
data = train_data,
method = "rf",
trControl = ctrl)
train_data
result
train_data$result
bankingDF_working <- py$bankingDF_working
set.seed(42)
index <- createDataPartition(bankingDF_working$result, p = 0.8, list = FALSE)
train_data <- bankingDF_working[index, ]
test_data  <- bankingDF_working[-index, ]
ctrl <- trainControl(method = "cv",
number = 5,
sampling = "up")
set.seed(42)
model_rf_over <- caret::train(as.factor(result) ~ .,
data = train_data,
method = "rf",
trControl = ctrl)
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE, message=F, warning=F, comment=NA)
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
(.71-.65)/.65
6*((-11/12)^2)
(11/12)^2
11^2
*6
121*6
-21+(726/144)
144*21
726-3024
-2298/144
625/24
3024/144
3024+726
3750/144
(4500/30)+(4500/45)
4500/30
1/5
0.25/2.25
1/.1111111
0.2/2.25
1/.088888889
14*6
tan(25)
tan(25)*180/pi
tan(25*pi/180)
tan(20*pi/180)
tan(25*pi/180)/tan(20*pi/180)
0.466/0.364
1.28*800
1800-1024
776/0.28
0.466*(800+2771.429)
2000/tan(30*pi/180)
tan(55*pi/180)
2000/tan(55*pi/180)
3464.102-1400.415
2063.687/10
206.3687*3600/1000
2e+12/(328000000)
atan(49.8/86.7)
atan(49.8/86.7)*180/pi
sqrt(86.7^2+49.8^2)
atan(49.8/86.7)*180/pi + 180
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
1.5+5
6.5*4
26+16
42/17
6.5*4
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
